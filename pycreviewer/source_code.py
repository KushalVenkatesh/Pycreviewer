# -*- coding: utf-8 -*-
from pycparser import c_ast
from pycparser.c_ast import Node
from pycparser.plyparser import Coord
from typing import List


class Token(object):
    """
    Token class is a data class that abstracts the basic elements of C language.
    The Token class has two attributes: name and coord.
    name:
        Store the name of the base element.
        For example, if the basic element is a Symbol, such as a variable name, the
        Also, when the basic element is a keyword such as "break", the keyword name itself is stored
    __coord:
        Indicates the position of the basic element (filename, line, column).
        The entity of coord is an instance of the plyparser.Coord class.
        Coord class, implement accessors to file names, rows and columns to hide the use of the plyparser.Coord class.
    file:
         Indicates the name of the file describing the basic element.
    line:
        Indicates the position of the line describing the basic element.
    column:
        Indicates the position of the column in which the basic element is described.
    """
    def __init__(self, name:str, coord:Coord):
        self.name = name
        self.__coord = coord
        self.file = coord.file
        self.line = coord.line
        self.column = coord.column

Tokens = List[Token]

class SourceCode(object):
    """
    The SourceCode class abstracts source code information and provides a function to access each element.
    The SouceCode class uses the c_ast object generated by pycparser.parse().
    """

    def __init__(self, ast):
        self.ast = ast

    def DefinedFunctions(self)->Tokens:
        """
        Returns a list of defined functions.
        """
        ret = []
        for ext in self.ast:
            if(isinstance(ext, c_ast.FuncDef)):
                function = Token(ext.decl.name,ext.coord)
                ret.append(function)
        return ret

    def SearchFunctionCalls(self, target_funcname:str)->Tokens:
        """
        Search for a specific function being called and get the results of the search in the form of a list of FunctionCall objects.
        The search algorithm is a string comparison of function names and does not consider arguments or return values.
        """
        ret = []
        for ext in self.ast:
            if(isinstance(ext, c_ast.FuncDef)):
                    v = FuncCallVisitor(target_funcname)
                    v.visit(ext)
                    for node in v.visitedList():
                        token = Token(target_funcname, node.name.coord)
                        ret.append(token)
        return ret

    def StaticValiables(self)->Tokens:
        """
        Returns a list of static variables.
        """
        ret = []
        for ext in self.ast:
            if(hasattr(ext, 'type')):
                if(isinstance(ext.type, (c_ast.ArrayDecl,c_ast.TypeDecl,c_ast.PtrDecl))):
                    if(hasattr(ext, 'storage')):
                        if(ext.storage != []):
                            if(ext.storage[0] == 'static'):
                                token = Token(ext.name, ext.coord)
                                ret.append(token)
        return ret

    def GlobalValiables(self)->Tokens:
        """
        Returns a list of global variables.
        """
        ret = []
        for ext in self.ast:
            if(hasattr(ext, 'type')):
                if(isinstance(ext.type, (c_ast.ArrayDecl,c_ast.TypeDecl,c_ast.PtrDecl))):
                    if(hasattr(ext, 'storage')):
                        if(ext.storage == []):
                            token = Token(ext.name, ext.coord)
                            ret.append(token)
        return ret

    def __LocalVariables__(self)->Tokens:
        """
        Returns a list of local variables (function arguments and variables declared in the function definition).
        """
        ret = []
        for ext in self.ast:
            if(isinstance(ext, c_ast.FuncDef)):
                visitor = VariableDeclVisitor()
                """
                main()のように、
                関数引数がnullの場合、argsがNoneになるため、Noneチェックを行う
                """
                if(ext.decl.type.args is not None):
                    visitor.visit(ext.decl.type.args)   #関数引数を探索
                visitor.visit(ext.body)             #関数定義内を探索
                for node in visitor.visitedList():
                    """
                    main(void)のように、
                    引数=void関数の場合、'void'がTypedecl(.declname=None,.coord=None)として探索されてしまうので、チェックではじく
                    """
                    if( node.declname and node.coord ):
                        token = Token(node.declname, node.coord)
                        ret.append(token)
        return ret

    def Varialbles(self)->Tokens:
        """
        Returns a list of variable declarations.
        """
        ret = []
        global_vars = self.GlobalValiables()  
        static_vars = self.StaticValiables()
        local_vars = self.__LocalVariables__()
        ret.extend(global_vars)
        ret.extend(static_vars)
        ret.extend(local_vars)
        return ret

    def SearchNoBreakInCase(self)->Tokens:
        """
        Search for a case sentence that does not have a break.
        """
        ret = []
        caseVisitor = CaseVisitor()
        caseVisitor.visit(self.ast)
        for node in caseVisitor.visitedList():
            breakVisitor = BreakVisitor()
            breakVisitor.visit(node)
            if(len(breakVisitor.visitedList()) == 0):
                token = Token('Case',node.coord)
                ret.append(token) 
        return ret

    def SearchNoDefaultInSwitch(self)->Tokens:
        """
        Search for places in the Switch syntax that do not have default.      
        """
        ret = []
        switchVistor = SwitchVisitor()
        switchVistor.visit(self.ast)
        for node in switchVistor.visitedList():
            defaultVisitor = DefaultVisitor()
            defaultVisitor.visit(node)
            if(len(defaultVisitor.visitedList()) == 0):
                token = Token('Switch',node.coord)
                ret.append(token) 
        return ret

    def SearchRecursiveFunctionCall(self)->Tokens:
        """
        Searching for a recursive function.
        """
        ret = []
        for ext in self.ast:
            if(isinstance(ext, c_ast.FuncDef)):
                    funcname = ext.decl.name
                    v = FuncCallVisitor(funcname)
                    v.visit(ext)
                    for node in v.visitedList():
                        token = Token(funcname, node.name.coord)
                        ret.append(token)
        return ret

class VariableDeclVisitor(c_ast.NodeVisitor):
    """
    VariableDecl class inherits from NodeVisitor class of c_ast module.
    This class provides a function to retrieve a TypeDecl node (i.e., a node related to a variable declaration) recursively.
    """
    def __init__(self):
        self.visited = []

    def visit_TypeDecl(self, node):
        self.visited.append(node)
    
    def visitedList(self):
        return self.visited

class FuncCallVisitor(c_ast.NodeVisitor):
    """
    The FuncCallVisitor class inherits from the NodeVisitor class of the c_ast module and uses the
    This function provides the ability to retrieve the FuncCall node of the specified function name recursively.
    """
    def __init__(self, funcname):
        self.funcname = funcname
        self.visited = []

    def visit_FuncCall(self, node):
        if node.name.name == self.funcname:
            self.visited.append(node)
        # Visit args in case they contain more func calls.
        if node.args:
            self.visit(node.args)
    
    def visitedList(self):
        return self.visited

class CaseVisitor(c_ast.NodeVisitor):
    """
    The CaseVisitor class inherits from the NodeVisitor class of the c_ast module and uses the
    It provides the ability to retrieve a Case node recursively.
    """
    def __init__(self):
        self.visited = []

    def visit_Case(self, node):
        self.visited.append(node)
    
    def visitedList(self):
        return self.visited

class BreakVisitor(c_ast.NodeVisitor):
    """
    The BreakVisitor class inherits from the NodeVisitor class of the c_ast module and uses the
    Provide the ability to recursively search for Break nodes.
    """
    def __init__(self):
        self.visited = []

    def visit_Break(self, node):
        self.visited.append(node)
    
    def visitedList(self):
        return self.visited

class SwitchVisitor(c_ast.NodeVisitor):
    """
    The SwitchVisitor class inherits from the NodeVisitor class of the c_ast module and uses the
    It provides the ability to recursively search for Switch nodes.
    """
    def __init__(self):
        self.visited = []

    def visit_Switch(self, node):
        self.visited.append(node)
    
    def visitedList(self):
        return self.visited

class DefaultVisitor(c_ast.NodeVisitor):
    """
    The DefaultVisitor class inherits from the NodeVisitor class of the c_ast module and uses the
    Provides the ability to recursively search for Default nodes.
    """
    def __init__(self):
        self.visited = []

    def visit_Default(self, node):
        self.visited.append(node)
    
    def visitedList(self):
        return self.visited


